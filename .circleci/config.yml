#pragma solidity ^0.6.0;
#
#contract HelloWorld {
#  function helloWorld() external pure returns (string memory) {
#    return "Hello, World!";
#  }
#}
# vim:ts=2:sw=2:et
# --------------------------------------------------------------------------
#   Prefixes used in order to keep CircleCI workflow overview more readable:
#     - b: build
#     - t: test
#     - ubu: ubuntu
#     - ems: Emscripten
#     - git config --global core.autocrlf_input.sh
#   Run:
     Command: ./ci/Configure_Git_to_ensure_line_endings_in_file_checkouts_are_correct_for_Linux.sh
      - git config --global core.autocrlf_input.sh
#   Run:
     Command: ./ci/Configure_Git_to_ensure_line_endings_in_file_checkouts_are_correct_for_Ubuntu.sh
version: 2

defaults:

  # --------------------------------------------------------------------------
  # Build Templates

  - # 

version: 2.1
jobs:
  Hello-World:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Hello World
          command: |
            echo 'Hello World!'
            echo 'This is the delivery pipeline'
  I-Have-Code:
    docker:
      - image: alpine:3.7
    steps:
      - checkout
      - run:
          name: Code Has Arrived
          command: |
            ls -al
            echo '^^^That should look familiar^^^'
  Run-With-Node:
    docker:
      - image: circleci/node:10-browsers
    steps:
      - run:
          name: Running In A Container With Node
          command: |
            node -v
  Now-Complete:
    docker:
      - image: alpine:3.7
    steps:
      - run:
          name: Approval Complete
          command: |
            echo 'Do work once the approval has completed'

workflows:
 version: 2
 Example_Workflow:
   jobs:
     - Hello-World
     - I-Have-Code:
         requires:
           - Hello-World
     - Run-With-Node:
         requires:
           - Hello-World
     - Hold-For-Approval:
         type: approval
         requires:
           - Run-With-Node
           - I-Have-Code
     - Now-Complete:
         requires:
           - Hold-For-Approval
           - ~/.circleci/config.yml
version: 2
jobs:
  test:
    docker:
      - image: circleci/<language>:<version TAG>
    parallelism: 4
    steps:
      - run:
          command: |
            echo $(circleci tests glob "foo/**/*" "bar/**/*")
            circleci tests glob "foo/**/*" "bar/**/*" | xargs -n 1 echo
--timings-type flag.
cat my_java_test_classnames | circleci tests split --split-by=timings --timings-type=classname
circleci tests glob "test/**/*.java" | circleci tests split
version: 2.1
  jobs:
   build:
    machine:
      image: ubuntu-1604:201903-0. 
      # recommended linux image - includes Ubuntu 16.04, docker 18.09.3,   docker-compose 1.23.1
  resource_class: 2xlarge
    steps:
      ... // other config
     build:
      executor: win/2xlarge
    steps:
      - run: Write-Host 'Hello, World'
    build:
     working_directory: ~/canary-python
      environment:
       FOO: bar
steps:
  - run:
     name: Running tests
       command: make test  
    - run:
        command: |
           echo Running test
      mkdir -p /tmp/test-results
  make test:
    steps:
      - run:
          name: Testing application
            command: make test
               shell: /bin/bash
      working_directory: ~/my-app
      no_output_timeout: 30m
        environment:
          FOO: bar
      - run: echo 127.0.0.1 devhost | sudo tee-a /etc/hosts -  
      - run: |  sudo -u root createuser -h      localhost--superuser ubuntu && sudo createdb -h localhost test_db
      - run:
          name: Upload Failed Tests
            command: curl --data fail_tests.log
              http://example.com/error_logs
                when: on_fail jobs: # conditional
steps may also be. defined in  commands:`job_with_optional_custom_checkout_and_SUB (^Z):
   parameters:
     custom_checkout:
       type: string
          default: ""
             machine: true
               steps:
                  - when:
                  - condition: <<parameters.custom_checkout>>
                steps:
                  - run: echo "my custom checkout"
                  - unless:
                     condition:
<<parameters.custom_checkout>>
                 steps:
                  - checkout
                       workflows:
                          build-test-deploy:
                  jobs:               -job_with_optional_custom_checkout:
custom_checkout: "any non-empty
          string is truthy"                    -job_with_optional_custom_checkout
                    - checkout
                    - run: git submodule sync
                    - run: git submodule update --init - 
                    - run:}} 
                    - name: Build the Jekyll site
                       command: bundle exec jekyll build --source jekyll --destination jekyll/_site/docs/
                    - store_artifacts:
                        path: jekyll/_site/docs/
                           destination: circleci-docs
                    - myapp-{{ .Branch }}-{{ checksum "package-lock.json" 

    environment:
      TERM: xterm
    steps:
      - checkout
      - run:
          name: Z3 python deps
          command: |
            apt-get -qq update
            apt-get -qy install python-pip
            pip install --user z3-solver
      - run: *run_proofs

  b_ubu: &build_ubuntu1904
    docker:
      - image: ethereum/solidity-buildpack-deps:ubuntu1904
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_ubu_release: &build_ubuntu1904_release
    <<: *build_ubuntu1904
    environment:
      FORCE_RELEASE: ON

  b_ubu18: &build_ubuntu1804
    docker:
      - image: ethereum/solidity-buildpack-deps:ubuntu1804
    environment:
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-O2
      CMAKE_BUILD_TYPE: RelWithDebugInfo
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_ubu_codecov:
    <<: *build_ubuntu1904
    environment:
      COVERAGE: ON
      CMAKE_BUILD_TYPE: Debug
    steps:
      - checkout
      - run: *run_build
      - persist_to_workspace: *artifacts_build_dir

  t_ubu_codecov:
    <<: *test_ubuntu1904
    environment:
      EVM: constantinople
      OPTIMIZE: 1
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: "soltest: Syntax Tests"
          command: build/test/soltest -t 'syntaxTest*' -- --testpath test
      - run:
          name: "Code Coverage: Syntax Tests"
          command: codecov --flags syntax --gcov-root build
      - run: *run_soltest
      - run:
          name: "Coverage: All"
          command: codecov --flags all --gcov-root build
      - store_artifacts: *artifacts_test_results

  # Builds in C++20 mode and uses debug build in order to speed up.
  # Do *NOT* store any artifacts or workspace as we don't run tests on this build.
  b_ubu_cxx20:
    <<: *build_ubuntu1904
    environment:
      CMAKE_BUILD_TYPE: Debug
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/cxx20.cmake -DUSE_CVC4=OFF
    steps:
      - checkout
      - run: *run_build

  b_ubu_ossfuzz:
    <<: *build_ubuntu1904
    environment:
      TERM: xterm
      CC: /usr/bin/clang-8
      CXX: /usr/bin/clang++-8
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/libfuzzer.cmake
    steps:
      - checkout
      - run: *setup_prerelease_commit_hash
      - run: *run_build_ossfuzz
      - persist_to_workspace: *artifacts_executables_ossfuzz

  t_ubu_ossfuzz: &t_ubu_ossfuzz
    <<: *test_ubuntu1904
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Regression tests
          command: |
            mkdir -p test_results
            export ASAN_OPTIONS="check_initialization_order=true:detect_stack_use_after_return=true:strict_init_order=true:strict_string_checks=true:detect_invalid_pointer_pairs=2"
            scripts/regressions.py -o test_results
      - run: *gitter_notify_failure
      - run: *gitter_notify_success
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  b_archlinux:
    docker:
      - image: archlinux/base
    environment:
      TERM: xterm
    steps:
      - run:
          name: Install build dependencies
          command: |
            pacman --noconfirm -Syu --noprogressbar --needed base-devel boost cmake z3 cvc4 git openssh tar
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_osx:
    macos:
      xcode: "10.0.0"
    environment:
      TERM: xterm
      CMAKE_BUILD_TYPE: Debug
      CMAKE_OPTIONS: -DLLL=ON
    steps:
      - checkout
      - run:
          name: Install build dependencies
          command: |
            brew unlink python
            brew install z3
            brew install boost
            brew install cmake
            brew install wget
            ./scripts/install_obsolete_jsoncpp_1_7_4.sh
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  t_osx_cli:
    macos:
      xcode: "10.0.0"
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Install dependencies
          command: |
            brew unlink python
            brew install z3
      - run: *run_cmdline_tests
      - store_artifacts: *artifacts_test_results

  b_ems:
    docker:
      - image: trzeci/emscripten:sdk-tag-1.38.22-64bit
    environment:
      TERM: xterm
    steps:
      - checkout
      - restore_cache:
          name: Restore Boost build
          key: &boost-cache-key emscripten-boost-{{ checksum "scripts/travis-emscripten/install_deps.sh" }}{{ checksum "scripts/build_emscripten.sh" }}{{ checksum "scripts/travis-emscripten/build_emscripten.sh" }}
      - run:
          name: Bootstrap Boost
          command: |
            scripts/travis-emscripten/install_deps.sh
      - run:
          name: Build
          command: |
            scripts/travis-emscripten/build_emscripten.sh
      - save_cache:
          name: Save Boost build
          key: *boost-cache-key
          paths:
            - boost_1_70_0_install
      - store_artifacts:
          path: emscripten_build/libsolc/soljson.js
          destination: soljson.js
      - run: mkdir -p workspace
      - run: cp emscripten_build/libsolc/soljson.js workspace/soljson.js
      - run: scripts/get_version.sh > workspace/version.txt
      - persist_to_workspace:
          root: workspace
          paths:
            - soljson.js
            - version.txt

  # x64 ASAN build, for testing for memory related bugs
  b_ubu_asan: &b_ubu_asan
    <<: *build_ubuntu1904
    environment:
      CMAKE_OPTIONS: -DSANITIZE=address
      CMAKE_BUILD_TYPE: Release
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *artifacts_solc
      - persist_to_workspace: *artifacts_executables

  b_docs:
    docker:
      - image: ethereum/solidity-buildpack-deps:ubuntu1904
    steps:
      - checkout
      - run: *setup_prerelease_commit_hash
      - run:
          name: Build documentation
          command: ./scripts/docs.sh
      - store_artifacts:
          path: docs/_build/html/
          destination: docs-html

  t_ubu_soltest: &t_ubu_soltest
    <<: *test_ubuntu1904

  t_ubu_release_soltest: &t_ubu_release_soltest
    <<: *t_ubu_soltest

  t_ubu_cli: &t_ubu_cli
    docker:
      - image: ethereum/solidity-buildpack-deps:ubuntu1904
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: *run_cmdline_tests
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  t_ubu_release_cli: &t_ubu_release_cli
    <<: *t_ubu_cli

  t_ubu_asan_cli:
    <<: *t_ubu_cli
    environment:
      TERM: xterm
      ASAN_OPTIONS: check_initialization_order=true:detect_stack_use_after_return=true:strict_init_order=true:strict_string_checks=true:detect_invalid_pointer_pairs=2
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          <<: *run_cmdline_tests
          no_output_timeout: 30m
      - store_test_results: *store_test_results
      - store_artifacts: *artifacts_test_results

  t_ubu_asan_constantinople:
    <<: *test_asan
    environment:
      EVM: constantinople
      OPTIMIZE: 0
      flags: --no-smt
      ASAN_OPTIONS: check_initialization_order=true:detect_stack_use_after_return=true:strict_init_order=true:strict_string_checks=true:detect_invalid_pointer_pairs=2

  t_ems_solcjs:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Test solcjs
          command: |
            node --version
            npm --version
            test/solcjsTests.sh /tmp/workspace/soljson.js $(cat /tmp/workspace/version.txt)

  t_ems_external_gnosis:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External GnosisSafe tests
          command: |
            test/externalTests/gnosis.sh /tmp/workspace/soljson.js || test/externalTests/gnosis.sh /tmp/workspace/soljson.js
      - run: *gitter_notify_failure
      - run: *gitter_notify_success

  t_ems_external_zeppelin:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External Zeppelin tests
          command: |
            test/externalTests/zeppelin.sh /tmp/workspace/soljson.js || test/externalTests/zeppelin.sh /tmp/workspace/soljson.js
      - run: *gitter_notify_failure
      - run: *gitter_notify_success

  t_ems_external_colony:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install test dependencies
          command: |
            sudo apt-get -qy install lsof
      - run:
          name: External ColonyNetworks tests
          command: |
            test/externalTests/colony.sh /tmp/workspace/soljson.js || test/externalTests/colony.sh /tmp/workspace/soljson.js
      - run: *gitter_notify_failure
      - run: *gitter_notify_success

workflows:
  version: 2

  main:
    jobs:
      # basic checks
      - chk_spelling: *workflow_trigger_on_tags
      - chk_coding_style: *workflow_trigger_on_tags
      # DISABLED FOR 0.6.0 - chk_docs_examples: *workflow_trigger_on_tags
      - chk_buglist: *workflow_trigger_on_tags
      - chk_proofs: *workflow_trigger_on_tags

      # build-only
      - b_docs: *workflow_trigger_on_tags
      - b_archlinux: *workflow_trigger_on_tags
      - b_ubu_cxx20: *workflow_trigger_on_tags
      - b_ubu_ossfuzz: *workflow_trigger_on_tags

      # OS/X build and tests
      - b_osx: *workflow_trigger_on_tags
      - t_osx_cli: *workflow_osx

      # Ubuntu build and tests
      - b_ubu: *workflow_trigger_on_tags
      - b_ubu18: *workflow_trigger_on_tags
      - t_ubu_cli: *workflow_ubuntu1904
      - t_ubu_soltest: *workflow_ubuntu1904

      # Ubuntu fake release build and tests
      - b_ubu_release: *workflow_trigger_on_tags
      - t_ubu_release_cli: *workflow_ubuntu1904_release
      - t_ubu_release_soltest: *workflow_ubuntu1904_release

      # ASan build and tests
      - b_ubu_asan: *workflow_trigger_on_tags
      - t_ubu_asan_constantinople: *workflow_ubuntu1904_asan
      - t_ubu_asan_cli: *workflow_ubuntu1904_asan

      # Emscripten build and selected tests
      - b_ems: *workflow_trigger_on_tags
      - t_ems_solcjs: *workflow_emscripten

  nightly:

    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
                - develop_060

    jobs:
      # Emscripten builds and external tests
      - b_ems: *workflow_trigger_on_tags
      - t_ems_external_zeppelin: *workflow_emscripten
      - t_ems_external_gnosis: *workflow_emscripten
      - t_ems_external_colony: *workflow_emscripten

      # OSSFUZZ builds and (regression) tests
      - b_ubu_ossfuzz: *workflow_trigger_on_tags
      - t_ubu_ossfuzz: *workflow_ubuntu1904_ossfuzz

      # Code Coverage enabled build and tests
      - b_ubu_codecov: *workflow_trigger_on_tags
      - t_ubu_codecov: *workflow_ubuntu1904_codecov
